KPI’s Requirements

1. Total Sales: The overall revenue generated from all items sold.

SELECT CAST(SUM(total_sales) AS DECIMAL(10,2))AS Total_Sales_Million
FROM blinkit_data;

2. Average Sales: The average revenue per sale.

SELECT CAST(AVG(total_sales) AS DECIMAL(10,2)) AS Avg_Sales
FROM blinkit_data;

3. Number of Items: The total count of different items sold.

SELECT COUNT(*) AS no_of_item_sold FROM blinkit_data;

4. Average Rating: The average customer rating for items sold. 

SELECT AVG(rating) AS avg_ratings FROM blinkit_data;


Granular Requirements

1. Total Sales by Fat Content:
	Objective: Analyze the impact of fat content on total sales.
	Additional KPI Metrics: Assess how other KPIs (Average Sales, Number of Items, Average Rating) vary with fat content

SELECT
	ITEM_FAT_CONTENT,
	CAST(SUM(TOTAL_SALES) AS DECIMAL(10, 2)) AS SALES_BY_FATCONTENT,
	CAST(AVG(total_sales) AS DECIMAL(10,2)) AS Avg_Sales,
	COUNT(*) AS no_of_item_sold,
	CAST(AVG(rating) AS DECIMAL(10,2)) AS avg_ratings

FROM
	BLINKIT_DATA
GROUP BY
	ITEM_FAT_CONTENT
ORDER BY
	SALES_BY_FATCONTENT DESC;


2. Total Sales by Item Type:
	Objective: Identify the performance of different item types in terms of total sales.
	Additional KPI Metrics: Assess how other KPIs (Average Sales, Number of Items, Average Rating) vary with fat content.

SELECT
	ITEM_TYPE,
	CAST(SUM(TOTAL_SALES) AS DECIMAL(10, 2)) AS TOTALSALES,
	CAST(AVG(total_sales) AS DECIMAL(10,2)) AS Avg_Sales,
	COUNT(*) AS no_of_item_sold,
	CAST(AVG(rating) AS DECIMAL(10,2)) AS avg_ratings

FROM
	BLINKIT_DATA
GROUP BY
	ITEM_TYPE
ORDER BY
	TOTALSALES DESC LIMIT 5;


3. Fat Content by Outlet for Total Sales:
	Objective: Compare total sales across different outlets segmented by fat content.
	Additional KPI Metrics: Assess how other KPIs (Average Sales, Number of Items, Average Rating) vary with fat content.


SELECT
	OUTLET_LOCATION_TYPE, ITEM_FAT_CONTENT,
	CAST(SUM(TOTAL_SALES) / 1000000 AS DECIMAL(10, 2)) AS TOTALSALES,
	CAST(AVG(total_sales) AS DECIMAL(10,2)) AS Avg_Sales,
	COUNT(*) AS no_of_item_sold,
	CAST(AVG(rating) AS DECIMAL(10,2)) AS avg_ratings

FROM
	BLINKIT_DATA
GROUP BY
	OUTLET_LOCATION_TYPE, ITEM_FAT_CONTENT
ORDER BY
	TOTALSALES DESC ;

4. Total Sales by Outlet Establishment:
	Objective: Evaluate how the age or type of outlet establishment influences total sales.

SELECT
	OUTLET_ESTABLISHMENT_YEAR,
	CAST(SUM(TOTAL_SALES) / 1000000 AS DECIMAL(10, 2)) AS TOTALSALES,
	CAST(AVG(total_sales) AS DECIMAL(10,2)) AS Avg_Sales,
	COUNT(*) AS no_of_item_sold,
	CAST(AVG(rating) AS DECIMAL(10,2)) AS avg_ratings

FROM
	BLINKIT_DATA
GROUP BY
	OUTLET_ESTABLISHMENT_YEAR
ORDER BY
	TOTALSALES DESC ;


Chart’s Requirements

5. Percentage of Sales by Outlet Size:
	Objective: Analyze the correlation between outlet size and total sales.

SELECT
	OUTLET_SIZE,
	CAST(SUM(TOTAL_SALES) AS DECIMAL(10, 2))AS TOTALSALES,
	CONCAT(CAST((SUM(TOTAL_SALES) * 100.0 / SUM(SUM(TOTAL_SALES)) OVER()) AS DECIMAL(10,2)),'%') AS SALES_PERCENTAGE
FROM
	BLINKIT_DATA
GROUP BY
	OUTLET_SIZE
ORDER BY
	TOTALSALES DESC ;


6. Sales by Outlet Location:
	Objective: Assess the geographic distribution of sales across different locations.

SELECT
	OUTLET_LOCATION_TYPE,
	CAST(SUM(TOTAL_SALES) AS DECIMAL(10, 2)) AS TOTALSALES,
	CONCAT(CAST((SUM(TOTAL_SALES) * 100.0 / SUM(SUM(TOTAL_SALES)) OVER()) AS DECIMAL(10,2)),'%') AS SALES_PERCENTAGE,
	CAST(AVG(total_sales) AS DECIMAL(10,2))AS Avg_Sales,
	COUNT(*) AS no_of_item_sold,
	CAST(AVG(rating) AS DECIMAL(10,2)) AS avg_ratings

FROM
	BLINKIT_DATA
GROUP BY
	OUTLET_LOCATION_TYPE
ORDER BY
	TOTALSALES DESC ;



7. All Metrics by Outlet Type:
	Objective: Provide a comprehensive view of all key metrics (Total Sales, Average Sales, Number of 	Items, Average Rating) broken down by different outlet types.

SELECT
	OUTLET_TYPE,
	CAST(SUM(TOTAL_SALES) AS DECIMAL(10, 2)) AS TOTALSALES,
	CONCAT(CAST((SUM(TOTAL_SALES) * 100.0 / SUM(SUM(TOTAL_SALES)) OVER()) AS DECIMAL(10,2)),'%') AS SALES_PERCENTAGE,
	CAST(AVG(total_sales) AS DECIMAL(10,2))AS Avg_Sales,
	COUNT(*) AS no_of_item_sold,
	CAST(AVG(rating) AS DECIMAL(10,2)) AS avg_ratings

FROM
	BLINKIT_DATA
GROUP BY
	OUTLET_TYPE
ORDER BY
	TOTALSALES DESC ;



